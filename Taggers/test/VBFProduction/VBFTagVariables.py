dipho_variables=[
    "dipho_sumpt      := diPhoton.sumPt",
    "dipho_cosphi     := abs(cos(diPhoton.leadingPhoton.phi - diPhoton.subLeadingPhoton.phi))",
    "mass             := diPhoton.mass",
    "leadPt           := diPhoton.leadingPhoton.pt",
    "leadEt           := diPhoton.leadingPhoton.et",
    "leadEta          := diPhoton.leadingPhoton.eta",
    "leadPhi          := diPhoton.leadingPhoton.phi",
    "lead_sieie       := diPhoton.leadingPhoton.sigmaIetaIeta",
    "lead_hoe         := diPhoton.leadingPhoton.hadronicOverEm",
    "lead_sigmaEoE    := diPhoton.leadingPhoton.sigEOverE",
    "lead_ptoM        := diPhoton.leadingPhoton.pt/diPhoton.mass",
    "leadR9           := diPhoton.leadingPhoton.r9",
    "subleadPt        := diPhoton.subLeadingPhoton.pt",
    "subleadEt        := diPhoton.subLeadingPhoton.et",
    "subleadEta       := diPhoton.subLeadingPhoton.eta",
    "subleadPhi       := diPhoton.subLeadingPhoton.phi",
    "sublead_sieie    := diPhoton.subLeadingPhoton.sigmaIetaIeta",
    "sublead_hoe      := diPhoton.subLeadingPhoton.hadronicOverEm",
    "sublead_sigmaEoE := diPhoton.subLeadingPhoton.sigEOverE",
    "sublead_ptoM     := diPhoton.subLeadingPhoton.pt/diPhoton.mass",
    "subleadR9        := diPhoton.subLeadingPhoton.r9",
    "leadIDMVA        := diPhoton.leadingView.phoIdMvaWrtChosenVtx",
    "subleadIDMVA     := diPhoton.subLeadingView.phoIdMvaWrtChosenVtx",]

dijet_variables=[
    "dijet_abs_dEta      :=  VBFMVA.dijet_abs_dEta   ",
    "dijet_leadEta       :=  VBFMVA.dijet_leadEta    ",
    "dijet_subleadEta    :=  VBFMVA.dijet_subleadEta ",
    "dijet_leady         :=  VBFMVA.dijet_leady      ",
    "dijet_subleady      :=  VBFMVA.dijet_subleady   ",
    "dijet_LeadJPt       :=  VBFMVA.dijet_LeadJPt    ",
    "dijet_SubJPt        :=  VBFMVA.dijet_SubJPt     ",
    "dijet_Zep           :=  VBFMVA.dijet_Zep        ",
    "dijet_Mjj           :=  VBFMVA.dijet_Mjj        ",
    "dipho_PToM          :=  VBFMVA.dipho_PToM       ",
    "leadPho_PToM        :=  VBFMVA.leadPho_PToM     ",
    "sublPho_PToM        :=  VBFMVA.sublPho_PToM     ",
    "dijet_dphi_trunc    :=  VBFMVA.dijet_dphi_trunc ",
    "dijet_dipho_pt      :=  VBFMVA.dijet_dipho_pt   ",
    "dijet_dphi          :=  abs(VBFMVA.leadJet.phi - VBFMVA.subleadJet.phi)",
    "dijet_dipho_dphi    :=  VBFMVA.dijet_dipho_dphi",
    "dijet_minDRJetPho   :=  VBFMVA.dijet_minDRJetPho",
    "has3Jet             :=  hasValidVBFTriJet",
    "dijet_MVA           :=  VBFMVA.VBFMVAValue",
    "dijet_dipho_dphi_trunc :=  VBFMVA.dijet_dipho_dphi ",
    # new variables
    "jet1_pt             := leadingJet.pt",
    "jet2_pt             := subLeadingJet.pt",
    "jet3_pt             := subSubLeadingJet.pt",
    "jet1_eta            := leadingJet.pt",
    "jet2_eta            := subLeadingJet.pt",
    "jet3_eta            := subSubLeadingJet.pt",
    # tag truth information
    "genZ                :=tagTruth().genPV().z", # try that !!
    "pt_genJetMatchingToJ1                := tagTruth().pt_genJetMatchingToJ1",
    "pt_genJetMatchingToJ2                := tagTruth().pt_genJetMatchingToJ2",
    "pt_genJetMatchingToJ3                := tagTruth().pt_genJetMatchingToJ3",
    "eta_genJetMatchingToJ1               := tagTruth().eta_genJetMatchingToJ1",
    "eta_genJetMatchingToJ2               := tagTruth().eta_genJetMatchingToJ2",
    "eta_genJetMatchingToJ3               := tagTruth().eta_genJetMatchingToJ3",
    "hasClosestGenJetToLeadingJet         := tagTruth().hasClosestGenJetToLeadingJet",
    "hasClosestGenJetToSubLeadingJet      := tagTruth().hasClosestGenJetToSubLeadingJet",
    "hasClosestParticleToLeadingJet       := tagTruth().hasClosestParticleToLeadingJet",
    "hasClosestParticleToSubLeadingJet    := tagTruth().hasClosestParticleToSubLeadingJet",
    "hasClosestParticleToLeadingPhoton    := tagTruth().hasClosestParticleToLeadingPhoton",
    "hasClosestParticleToSubLeadingPhoton := tagTruth().hasClosestParticleToSubLeadingPhoton",
    
    "Mjj                 := sqrt((leadingJet.energy+subLeadingJet.energy)^2-(leadingJet.px+subLeadingJet.px)^2-(leadingJet.py+subLeadingJet.py)^2-(leadingJet.pz+subLeadingJet.pz)^2)"
    
]
